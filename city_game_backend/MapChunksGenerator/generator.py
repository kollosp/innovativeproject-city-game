import requests
import xml.etree.ElementTree
import logging

from .models import Chunk, RoadNode

OVERPASS_API_URL = 'https://lz4.overpass-api.de/api/interpreter'
CHUNK_SIZE = 0.01
STANDARD_QUERY = '''
way
  (
{}, {},
{}, {}
)
  [highway=residential]
  //[surface=asphalt]
  ;

(._;>;);

out;

'''


def perform_overpass_query(query: str) -> str:
    """
    Performs an overpass API query and returns its response

    :param query: overpass query in the overpass query language
    :return: the overpass api response
    """
    data = {'data': query}

    logging.debug('Executing a following Overpass query: {}'.format(query))

    request = requests.post(OVERPASS_API_URL, data=data)

    return request.content.decode()


def save_one_chunk(xml_data: str, lower_latitude: float, lower_longitude: float):
    """
    Loads the XML generated by the `perform_overpass_query` to the database

    :param xml_data: the xml data from the overpass api
    :param lower_latitude: the bottom border of the chunk
    :param lower_longitude: the left border of the chunk
    """
    root = xml.etree.ElementTree.fromstring(xml_data)

    new_chunk = Chunk(
        latitude_lower_bound=lower_latitude,
        longitude_lower_bound=lower_longitude,
        latitude_upper_bound=lower_latitude + CHUNK_SIZE,
        longitude_upper_bound=lower_longitude + CHUNK_SIZE
    )

    new_chunk.save()

    # Going through all the roads - collections of points inside the XML
    for road in root.findall('way'):

        node_previous = None

        # the <way> point collections don't contain the road points coordintates, they just contain a reference
        # to a specific <node id="reference">
        for road_point in road.findall('nd'):
            ref = road_point.get('ref')

            # Looks for every element that
            query = ".//*[@id='{}']".format(ref)

            node_next_list = root.findall(query)

            try:
                node_next = node_next_list[0]

            except IndexError:
                logging.warning('Could not found a road node with id: {}, skipping it'.format(ref))
                continue

            if node_previous is None:
                node_previous = node_next
                continue

            road_node = RoadNode(
                latitude_start=node_previous.get('lat'),
                latitude_end=node_next.get('lat'),
                longitude_start=node_previous.get('lon'),
                longitude_end=node_next.get('lon')
            )

            road_node.chunk = new_chunk
            road_node.save()


def batch_chunks_loading(lower_longitude_start, lower_latitude_start, square_size):
    """
    Generates map chunks starting from the given latitude and longitude,
    goes towards top and right generating a square with a given size

    EXAMPLE:

    square_size - 5
    lower_lat - 50
    lower_long - 17

     _ _ _ _
    |_|_|_|_|
    |_|_|_|_|   The square side is 5 chunks long, so 25 chunks were generated
    |_|_|_|_|
    |_|_|_|_|
    |_|_|_|_|

    ^ the lower left corner is your starting point - (lower_lat, lower_long)
    """

    for chunk_x_offset in range(square_size):
        for chunk_y_offset in range(square_size):

            logging.info(
                'Downloading data for chunk {}, {}'.format(
                    lower_longitude_start + chunk_y_offset,
                    lower_latitude_start + chunk_x_offset
                )
            )

            query = STANDARD_QUERY.format(
                lower_longitude_start + chunk_y_offset,
                lower_latitude_start + chunk_x_offset,
                lower_longitude_start + chunk_y_offset + CHUNK_SIZE,
                lower_latitude_start + chunk_x_offset + CHUNK_SIZE
            )
            data = perform_overpass_query(query)

            logging.info(
                'Saving chunk {}, {}'.format(
                    lower_longitude_start + chunk_y_offset,
                    lower_latitude_start + chunk_x_offset
                )
            )

            save_one_chunk(
                data,
                lower_longitude_start,
                lower_latitude_start
            )

            logging.info(
                'Data chunk {}, {} saved!'.format(
                    lower_longitude_start + chunk_y_offset,
                    lower_latitude_start + chunk_x_offset
                )
            )
